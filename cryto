import hashlib
import json
import time
from ecdsa import SigningKey, VerifyingKey, SECP256k1

class Block:
    def __init__(self, index, transactions, previous_hash, timestamp=None, nonce=0):
        self.index = index
        self.transactions = transactions
        self.previous_hash = previous_hash
        self.timestamp = timestamp or time.time()
        self.nonce = nonce

    def compute_hash(self):
        block_string = json.dumps(self.__dict__, sort_keys=True)
        return hashlib.sha256(block_string.encode()).hexdigest()

class Blockchain:
    difficulty = 4  # Proof-of-work difficulty (adjust as needed)
    reward = 50  # Mining reward

    def __init__(self):
        self.chain = []
        self.pending_transactions = []
        self.create_genesis_block()

    def create_genesis_block(self):
        genesis_block = Block(0, [], "0")
        genesis_block.hash = genesis_block.compute_hash()
        self.chain.append(genesis_block)

    def get_last_block(self):
        return self.chain[-1]

    def add_transaction(self, sender, recipient, amount):
        transaction = {
            "sender": sender,
            "recipient": recipient,
            "amount": amount
        }
        self.pending_transactions.append(transaction)

    def proof_of_work(self, block):
        block.nonce = 0
        computed_hash = block.compute_hash()
        while not computed_hash.startswith("0" * Blockchain.difficulty):
            block.nonce += 1
            computed_hash = block.compute_hash()
        return computed_hash

    def add_block(self, block, proof):
        last_hash = self.get_last_block().hash
        if last_hash != block.previous_hash:
            return False
        if not self.is_valid_proof(block, proof):
            return False
        block.hash = proof
        self.chain.append(block)
        return True

    def is_valid_proof(self, block, block_hash):
        return block_hash.startswith("0" * Blockchain.difficulty) and block_hash == block.compute_hash()

    def mine(self, miner_address):
        if not self.pending_transactions:
            return False

        new_block = Block(
            index=len(self.chain),
            transactions=self.pending_transactions,
            previous_hash=self.get_last_block().hash
        )
        proof = self.proof_of_work(new_block)
        self.add_block(new_block, proof)
        self.pending_transactions = [{"sender": "network", "recipient": miner_address, "amount": Blockchain.reward}]
        return new_block

# Wallet functionality
class Wallet:
    def __init__(self):
        self.private_key = SigningKey.generate(curve=SECP256k1)
        self.public_key = self.private_key.verifying_key

    def sign_transaction(self, transaction):
        transaction_string = json.dumps(transaction, sort_keys=True).encode()
        signature = self.private_key.sign(transaction_string)
        return signature

    def verify_transaction(self, transaction, signature):
        transaction_string = json.dumps(transaction, sort_keys=True).encode()
        return self.public_key.verify(signature, transaction_string)

# Example usage
if __name__ == "__main__":
    # Initialize the blockchain
    horsevex_chain = Blockchain()

    # Create wallets
    alice = Wallet()
    bob = Wallet()

    # Alice sends Bob some HorseVex
    horsevex_chain.add_transaction(
        sender=alice.public_key.to_string().hex(),
        recipient=bob.public_key.to_string().hex(),
        amount=10
    )

    # Mine the transaction
    print("Mining a block...")
    mined_block = horsevex_chain.mine(miner_address=alice.public_key.to_string().hex())
    if mined_block:
        print(f"Block {mined_block.index} mined successfully!")

    # Display the blockchain
    for block in horsevex_chain.chain:
        print(f"Index: {block.index}, Hash: {block.compute_hash()}, Transactions: {block.transactions}")